import io ,os, sys, codecs
from Produktklassen_abc import Product, Read_Product_CSV
from flask import Flask, render_template, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from flask_wtf import FlaskForm
from flask_wtf.file import FileRequired
from wtforms import StringField, SubmitField, FloatField, SelectMultipleField, widgets, FileField
from wtforms.validators import InputRequired, Length

Path_Saving = "Test/"
try:
    sys.stdin = codecs.getreader("utf-8")(sys.stdin.detach())
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
except:
    pass  

""" Database """

db = SQLAlchemy()

class Order_DB(db.Model):
    __tablename__ = "Order v1"
    # mandatory values.
    id = db.Column(db.Integer, primary_key = True, nullable = False)
    customer = db.Column(db.Integer, nullable = False)
    total = db.Column(db.Float, nullable = False)
    items = db.Column(db.Integer, nullable = False)
    bag = db.Column(db.String(200), nullable = False)

def Find_Order_ID(id):
    return Order_DB.query.filter_by(id = id).first()

""" App """

products = Read_Product_CSV("Products.csv")

def Convert_Products_to_Field(products_list: list) -> list:
    return [(x.Hash(), x.Tags()) for x in products_list]

def Create_App():
    app = Flask(__name__)
    CORS(app, send_wildcard=True)
    app.secret_key = "test1234"
    app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///order.sqlite3"
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    db.init_app(app)

    @app.before_first_request
    # Initialize the database.
    def create_tables():
        db.create_all()

    """ Forms """

    # Form for enumerating all the products.
    class MultiCheckboxField(SelectMultipleField):
        widget = widgets.ListWidget(prefix_label=False)
        option_widget = widgets.CheckboxInput()

    # Form for adding an order manually.
    class AddOrderForm(FlaskForm):
        order_id = StringField("ID: ", validators=[InputRequired(), Length(min=1, max=10)])
        order_customer = FloatField("Customer ID: ", validators=[InputRequired()])
        order_products = MultiCheckboxField("Products: ", choices = Convert_Products_to_Field(products))
        submit = SubmitField("Add")

    # Form for adding orders generated by the order simulator.
    class AddOrderCsvForm(FlaskForm):
        order_file = FileField("File: ", validators=[FileRequired()])
        submit = SubmitField("Add")


    """ Webpages """

    # Base database.
    @app.route("/base_order", methods=["POST", "GET"])
    def base():
        app.logger.info("-----> base")
        daba_entries = db.session.query(Order_DB).all()
        return render_template("db_order_base.html", order_table = daba_entries)


    """ Add order """
    # used to convert the manual order to the database format by adding the amount of items (1).
    def Map_Manually_Order(product: str) -> str:
        return f"1;{product}"

    # Convert the form to a usable Order_DB object. 
    def Handle_Add_Order(form):
        order_id = form.get("order_id")
        order_customer = form.get("order_customer")
        products = form.getlist("order_products")

        app.logger.info(f"{order_id} - {order_customer} - {products}")
        return Order_DB(id = order_id, customer = order_customer, total = 0, items = len(products), bag = list(map(Map_Manually_Order, products)))

    # add an order manually and commit it to the database.
    @app.route("/base_order/add", methods=["POST", "GET"])
    def add_order():
        app.logger.info("-----> add")
        add_order_form = AddOrderForm()

        if request.method == "POST":
            app.logger.info(f"Added: {request.form}")

            order_add = Handle_Add_Order(request.form)
            db.session.add(order_add)
            db.session.commit()

            app.logger.info("Adding completed.")
            return render_template("add_order.html", form = add_order_form, heading = "Added Order to DB.")

        return render_template("add_order.html", form = add_order_form, heading = "Add your Order.")


    """ Add order via CSV File """

    # products format in csv: prod_price;prod_count;prod_id, split at ";" in order to return count and id.
    def Map_CSV(products: str) -> str:
        products = products.split(";")
        return f"{products[1]};{products[2]}"

    # products format in csv: prod_price;prod_count;prod_id, split at ";" in order to return count.
    def Map_Item_Count(products: str) -> int:
        products = products.split(";")
        return int(products[1])

    # return sum of all ordered products.
    def Sum_Items(order: str) -> int:
        return sum(list(map(Map_Item_Count, order.split(":")[:-1])))

    # open local file and add all entries to the database.
    def Handle_Add_CSV(form):
        app.logger.info(f"Input: {form}")
        path = os.path.join(Path_Saving, form.get("order_file"))

        with io.open(path, "r", encoding="utf-8") as order_csv:
            order_lines = order_csv.readlines()

            for order in order_lines:
                # order format in csv: ord_id;ord_total;customer_id,product:product
                info, products = order.split(",")
                # info: ord_id;ord_total;customer_id
                info = info.split(";")

                item_count = Sum_Items(products)
                # items: product:product: ...
                products = list(map(Map_CSV, products.split(":")[:-1]))

                cache = Order_DB(id=info[0], total=info[1], customer=info[2], items=item_count, bag=str(products))
                db.session.add(cache)
                db.session.commit()

        app.logger.info(f"Added {len(order_lines)} Orders.")


    @app.route("/base_order/add_csv", methods=["POST", "GET"])
    def add_order_csv():
        app.logger.info("-----> add csv")
        add_order_csv_form = AddOrderCsvForm()

        if request.method == "POST":
            app.logger.info("-----> add csv")
            Handle_Add_CSV(request.form)
            app.logger.info("Added completed")
            return render_template("add_csv_order.html", form = add_order_csv_form, heading = "Added Order successfully.")

        return render_template("add_csv_order.html", form = add_order_csv_form, heading = "Add your saved order.")

    return app

if __name__ == "__main__":
    # Create and start the app.
    app = Create_App()
    app.run(debug=True)
    app.logger.info("-----> http://127.0.0.1:5000/base_order ")
    app.logger.info("-----> http://127.0.0.1:5000/base_order/add ")
    app.logger.info("-----> http://127.0.0.1:5000/base_order/find ")

